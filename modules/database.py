# modules/database.py
"""
Este m√≥dulo fornece funcionalidades para estabelecer e gerenciar conex√µes
com bancos de dados MySQL e Oracle.

Ele inclui fun√ß√µes para inicializar as conex√µes, obter novas conex√µes
com tratamento de retries para MySQL, e fechar as conex√µes de forma segura.

As configura√ß√µes para os bancos de dados s√£o carregadas a partir do m√≥dulo
de configura√ß√£o (config.py). O m√≥dulo tamb√©m utiliza logging para registrar
informa√ß√µes sobre o status das conex√µes e quaisquer erros que ocorram.

Funcionalidades principais:
- Inicializa√ß√£o de conex√µes MySQL e Oracle.
- Teste de conectividade durante a inicializa√ß√£o.
- Obten√ß√£o de conex√µes MySQL com retry autom√°tico.
- Obten√ß√£o de conex√µes Oracle.
- Fechamento seguro de conex√µes para ambos os tipos de banco de dados.
- test_connections(): Testa as conex√µes com MySQL e/ou Oracle, conforme especificado.

Uso:
Para utilizar este m√≥dulo, importe-o e chame a fun√ß√£o `init_databases()`
no in√≠cio da sua aplica√ß√£o para garantir que as conex√µes com os bancos
de dados estejam estabelecidas e funcionando. A fun√ß√£o `test_connections()`
pode ser usada para verificar a conectividade com bancos de dados espec√≠ficos
atrav√©s de argumentos de linha de comando (-m para MySQL, -o para Oracle).
Para ver a ajuda detalhada sobre o m√≥dulo, use o argumento -H ou --module-help.
"""
import time
import logging
import mysql.connector
import cx_Oracle
from typing import Optional, Union
from .config import MYSQL_CONFIG, ORACLE_PASSWORD, ORACLE_TNS_ALIAS, ORACLE_USER
import argparse
import sys

logger = logging.getLogger(__name__)

# Vari√°veis para controle de inicializa√ß√£o
_mysql_initialized = False
_oracle_initialized = False

# Tipo personalizado para conex√µes
DBConnection = Union[mysql.connector.MySQLConnection, cx_Oracle.Connection]

def init_databases():
    """Inicializa e testa todas as conex√µes com bancos de dados"""
    init_mysql()
    init_oracle()

def init_mysql():
    """Inicializa e testa a conex√£o com MySQL"""
    global _mysql_initialized

    if _mysql_initialized:
        return

    logger.info("üîß Verificando conex√£o com MySQL...")

    try:
        connection = mysql.connector.connect(
            **MYSQL_CONFIG,
            autocommit=False,
            connect_timeout=5
        )

        if connection.is_connected():
            close_connection(connection)
            logger.info("‚úÖ Conex√£o com MySQL estabelecida!")
            _mysql_initialized = True  # Definir como inicializado apenas se a conex√£o for bem-sucedida
        else:
            logger.error("‚ùå Falha na conex√£o com MySQL!")
            raise RuntimeError("N√£o foi poss√≠vel conectar ao MySQL")

    except mysql.connector.Error as e:
        logger.error(f"Erro ao conectar ao MySQL: {str(e)}")
        raise RuntimeError(f"N√£o foi poss√≠vel conectar ao MySQL: {str(e)}")

def init_oracle():
    """Inicializa e testa a conex√£o com Oracle"""
    global _oracle_initialized

    if _oracle_initialized:
        return

    logger.info("üîß Verificando conex√£o com Oracle...")
    conn = get_oracle_connection()
    if conn:
        close_connection(conn)
        logger.info("‚úÖ Conex√£o com Oracle estabelecida!")
        _oracle_initialized = True
    else:
        logger.error("‚ùå Falha na conex√£o com Oracle!")
        raise RuntimeError("N√£o foi poss√≠vel conectar ao Oracle")

def get_mysql_connection(max_retries: int = 3, retry_delay: int = 1) -> Optional[mysql.connector.MySQLConnection]:
    """Estabelece conex√£o com MySQL com retry autom√°tico"""

    for attempt in range(max_retries):
        try:
            connection = mysql.connector.connect(
                **MYSQL_CONFIG,
                autocommit=False,
                connect_timeout=5
            )
            if connection.is_connected():
                logger.info(f"‚úÖ Conex√£o MySQL estabelecida (tentativa {attempt + 1}/{max_retries})")
                return connection
        except mysql.connector.Error as e:
            logger.error(f"‚ö†Ô∏è Tentativa {attempt + 1} falhou: {str(e)}")
            if attempt == max_retries - 1:
                logger.critical("‚ùå Falha ao conectar ao MySQL ap√≥s v√°rias tentativas")
                raise RuntimeError(f"Erro cr√≠tico: n√£o foi poss√≠vel conectar ao MySQL ap√≥s {max_retries} tentativas. √öltimo erro: {str(e)}")
            time.sleep(retry_delay)

    return None

def get_oracle_connection() -> Optional[cx_Oracle.Connection]:
    """Estabelece conex√£o com Oracle Database"""
    connection = None
    try:
        connection = cx_Oracle.connect(
            user=ORACLE_USER,
            password=ORACLE_PASSWORD,
            dsn=ORACLE_TNS_ALIAS
        )
        with connection.cursor() as cursor:
            cursor.execute("ALTER SESSION SET CURRENT_SCHEMA = FOCCO3I")

        logger.info("Conex√£o Oracle estabelecida")
        return connection
    except cx_Oracle.Error as e:
        logger.error(f"Erro ao conectar ao Oracle: {str(e)}")
    except Exception as e:
        logger.error(f"Erro inesperado ao conectar ao Oracle: {str(e)}")
    finally:
        if connection:
            pass
    return connection

def close_connection(connection: Optional[DBConnection]):
    """Fecha uma conex√£o de banco de dados de forma segura"""
    if not connection:
        return

    try:
        if isinstance(connection, mysql.connector.MySQLConnection) and connection.is_connected():
            connection.close()
            logger.debug("Conex√£o MySQL fechada com sucesso")
        elif isinstance(connection, cx_Oracle.Connection) and connection:
            connection.close()
            logger.debug("Conex√£o Oracle fechada com sucesso")
    except cx_Oracle.DatabaseError as e:
        logger.warning(f"Erro ao fechar conex√£o Oracle: {str(e)}")
    except mysql.connector.Error as e:
        logger.warning(f"Erro ao fechar conex√£o MySQL: {str(e)}")
    except Exception as e:
        logger.error(f"Erro inesperado ao fechar conex√£o: {str(e)}")

def help_database_module():
    """Exibe informa√ß√µes de ajuda sobre o m√≥dulo database."""
    import inspect
    from . import database  # Importa o m√≥dulo

    print("=" * 40)
    print(f"Ajuda para o m√≥dulo: {database.__name__}")
    print("=" * 40)
    print(inspect.getdoc(database) or "Nenhuma documenta√ß√£o dispon√≠vel para o m√≥dulo.")
    print("\n")

    print("-" * 40)
    print("Fun√ß√µes Principais:")
    print("-" * 40)

    module_functions = [
        database.init_databases,
        database.init_mysql,
        database.init_oracle,
        database.get_mysql_connection,
        database.get_oracle_connection,
        database.close_connection,
        database.test_connections, # Adicionando a nova fun√ß√£o √† lista de ajuda
    ]

    for func in module_functions:
        print(f"\nFun√ß√£o: {func.__name__}")
        docstring = inspect.getdoc(func)
        if docstring:
            print(docstring)
        else:
            print("Nenhuma documenta√ß√£o dispon√≠vel para esta fun√ß√£o.")

    print("\n")
    print("-" * 40)
    print("Observa√ß√µes:")
    print("-" * 40)
    print("- Este m√≥dulo fornece funcionalidades para conectar e gerenciar bancos de dados MySQL e Oracle.")
    print("- As configura√ß√µes de conex√£o s√£o carregadas do m√≥dulo 'config'.")
    print("- Utilize a fun√ß√£o 'init_databases()' para inicializar as conex√µes.")
    print("- Utilize 'get_mysql_connection()' e 'get_oracle_connection()' para obter conex√µes.")
    print("- N√£o se esque√ßa de fechar as conex√µes utilizando 'close_connection()'.")
    print("- A fun√ß√£o 'test_connections()' permite testar a conectividade com bancos de dados espec√≠ficos.")
    print("=" * 40)

def test_connections(test_mysql: bool = True, test_oracle: bool = True):
    """
    Testa as conex√µes com os bancos de dados MySQL e/ou Oracle.

    Args:
        test_mysql (bool, optional): Se True, a conex√£o com o MySQL ser√° testada.
                                     O padr√£o √© True.
        test_oracle (bool, optional): Se True, a conex√£o com o Oracle ser√° testada.
                                      O padr√£o √© True.

    Uso:
        Para testar ambos os bancos de dados (comportamento padr√£o):
        >>> python -m modules.database

        Para testar apenas a conex√£o MySQL:
        >>> python -m modules.database -m

        Para testar apenas a conex√£o Oracle:
        >>> python -m modules.database -o

        Para ver a ajuda detalhada sobre o m√≥dulo:
        >>> python -m modules.database -H

        Voc√™ tamb√©m pode usar as formas longas dos argumentos:
        >>> python -m modules.database --mysql
        >>> python -m modules.database --oracle
        >>> python -m modules.database --module-help
    """
    print("Iniciando teste de conex√µes...")

    if test_mysql:
        print("\nTestando conex√£o MySQL...")
        mysql_conn = get_mysql_connection()
        if mysql_conn:
            print("‚úÖ Conex√£o MySQL OK")
            close_connection(mysql_conn)
        else:
            print("‚ùå Falha na conex√£o MySQL")

    if test_oracle:
        print("\nTestando conex√£o Oracle...")
        oracle_conn = get_oracle_connection()
        if oracle_conn:
            print("‚úÖ Conex√£o Oracle OK")
            close_connection(oracle_conn)
        else:
            print("‚ö†Ô∏è Conex√£o Oracle n√£o configurada ou falhou")

    print("\nTeste de conex√µes conclu√≠do.")

class CustomHelpFormatter(argparse.HelpFormatter):
    def _format_actions_usage(self, actions, groups):
        usage = super()._format_actions_usage(actions, groups)
        return usage.replace('options', 'op√ß√µes')

    def format_help(self):
        help_string = super().format_help()
        return help_string.replace('options', 'op√ß√µes')

# Teste as conex√µes se o arquivo for executado diretamente
if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Testar conex√µes de banco de dados.",
                                     formatter_class=CustomHelpFormatter,
                                     add_help=False)
    parser.add_argument("-m", "--mysql", action="store_true", help="Testar conex√£o MySQL.")
    parser.add_argument("-o", "--oracle", action="store_true", help="Testar conex√£o Oracle.")
    parser.add_argument("-h", "--module-help", action="store_true", help="Mostrar ajuda detalhada sobre o m√≥dulo de banco de dados.")

    args = parser.parse_args()

    if args.module_help:
        help_database_module()
        sys.exit(0)

    test_mysql_flag = args.mysql
    test_oracle_flag = args.oracle

    if not test_mysql_flag and not test_oracle_flag:
        test_mysql_flag = True
        test_oracle_flag = True

    print("\nTestando conex√µes ao executar o m√≥dulo...")
    test_connections(test_mysql=test_mysql_flag, test_oracle=test_oracle_flag)